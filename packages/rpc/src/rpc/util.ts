export interface CreateMultisig {
  // The value of the new multisig address.
  address: string;
  // The string value of the hex-encoded redemption script.
  redeemScript: string;
  // The descriptor for this multisig
  descriptor: string;
  // Any warnings resulting from the creation of this multisig
  warnings?: string[];
}

export type DeriveAddresses = string[];

export interface EstimateSmartFee {
  // estimate fee rate in BTC/kvB (only present if no errors were encountered)
  feerate?: number;
  // Errors encountered during processing (if there are any)
  errors?: string[];
  // block number where estimate was found. The request target will be clamped between 2 and the highest target fee estimation is able to return based on how long it has been running. An error is returned if not enough transactions and blocks have been observed to make an estimate for any number of blocks.
  blocks: number;
}

export interface GetDescriptorInfo {
  // The descriptor in canonical form, without private keys
  descriptor: string;
  // The checksum for the input descriptor
  checksum: string;
  // Whether the descriptor is ranged
  isrange: boolean;
  // Whether the descriptor is solvable
  issolvable: boolean;
  // Whether the input descriptor contained at least one private key
  hasprivatekeys: boolean;
}

export interface GetIndexInfo {
  [key: string]: {
    // Whether the index is synced or not
    synced: boolean;
    // The block height to which the index is synced
    best_block_height: number;
  }
}

export type SignMessageWithPrivkey = string;

export interface ValidateAddress {
  // If the address is valid or not
  isvalid: boolean;
  // The bitcoin address validated
  address?: string;
  // The hex-encoded scriptPubKey generated by the address
  scriptPubKey?: string;
  // If the key is a script
  isscript?: boolean;
  // If the address is a witness address
  iswitness?: boolean;
  // The version number of the witness program
  witness_version?: number;
  // The hex value of the witness program
  witness_program?: string;
  // Error message, if any
  error?: string;
  // Indices of likely error locations in address, if known (e.g. Bech32 errors)
  error_locations?: number[];
}

export type VerifyMessage = boolean;